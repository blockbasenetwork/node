// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BlockHeaderProto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BlockBase.Domain.Protos {

  /// <summary>Holder for reflection information generated from BlockHeaderProto.proto</summary>
  public static partial class BlockHeaderProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for BlockHeaderProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BlockHeaderProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZCbG9ja0hlYWRlclByb3RvLnByb3RvEhdCbG9ja2Jhc2UuRG9tYWluLlBy",
            "b3RvcyKsAQoQQmxvY2tIZWFkZXJQcm90bxIRCglCbG9ja0hhc2gYASABKAwS",
            "GQoRUHJldmlvdXNCbG9ja0hhc2gYAiABKAwSEAoIUHJvZHVjZXIYAyABKAkS",
            "GQoRUHJvZHVjZXJTaWduYXR1cmUYBCABKAkSEgoKTWVya2xlUm9vdBgFIAEo",
            "DBIRCglUaW1lc3RhbXAYBiABKAQSFgoOU2VxdWVuY2VOdW1iZXIYByABKARi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BlockBase.Domain.Protos.BlockHeaderProto), global::BlockBase.Domain.Protos.BlockHeaderProto.Parser, new[]{ "BlockHash", "PreviousBlockHash", "Producer", "ProducerSignature", "MerkleRoot", "Timestamp", "SequenceNumber" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BlockHeaderProto : pb::IMessage<BlockHeaderProto> {
    private static readonly pb::MessageParser<BlockHeaderProto> _parser = new pb::MessageParser<BlockHeaderProto>(() => new BlockHeaderProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockHeaderProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BlockBase.Domain.Protos.BlockHeaderProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeaderProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeaderProto(BlockHeaderProto other) : this() {
      blockHash_ = other.blockHash_;
      previousBlockHash_ = other.previousBlockHash_;
      producer_ = other.producer_;
      producerSignature_ = other.producerSignature_;
      merkleRoot_ = other.merkleRoot_;
      timestamp_ = other.timestamp_;
      sequenceNumber_ = other.sequenceNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeaderProto Clone() {
      return new BlockHeaderProto(this);
    }

    /// <summary>Field number for the "BlockHash" field.</summary>
    public const int BlockHashFieldNumber = 1;
    private pb::ByteString blockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PreviousBlockHash" field.</summary>
    public const int PreviousBlockHashFieldNumber = 2;
    private pb::ByteString previousBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PreviousBlockHash {
      get { return previousBlockHash_; }
      set {
        previousBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Producer" field.</summary>
    public const int ProducerFieldNumber = 3;
    private string producer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Producer {
      get { return producer_; }
      set {
        producer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ProducerSignature" field.</summary>
    public const int ProducerSignatureFieldNumber = 4;
    private string producerSignature_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProducerSignature {
      get { return producerSignature_; }
      set {
        producerSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MerkleRoot" field.</summary>
    public const int MerkleRootFieldNumber = 5;
    private pb::ByteString merkleRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MerkleRoot {
      get { return merkleRoot_; }
      set {
        merkleRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "SequenceNumber" field.</summary>
    public const int SequenceNumberFieldNumber = 7;
    private ulong sequenceNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SequenceNumber {
      get { return sequenceNumber_; }
      set {
        sequenceNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockHeaderProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockHeaderProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockHash != other.BlockHash) return false;
      if (PreviousBlockHash != other.PreviousBlockHash) return false;
      if (Producer != other.Producer) return false;
      if (ProducerSignature != other.ProducerSignature) return false;
      if (MerkleRoot != other.MerkleRoot) return false;
      if (Timestamp != other.Timestamp) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockHash.Length != 0) hash ^= BlockHash.GetHashCode();
      if (PreviousBlockHash.Length != 0) hash ^= PreviousBlockHash.GetHashCode();
      if (Producer.Length != 0) hash ^= Producer.GetHashCode();
      if (ProducerSignature.Length != 0) hash ^= ProducerSignature.GetHashCode();
      if (MerkleRoot.Length != 0) hash ^= MerkleRoot.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (SequenceNumber != 0UL) hash ^= SequenceNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BlockHash);
      }
      if (PreviousBlockHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PreviousBlockHash);
      }
      if (Producer.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Producer);
      }
      if (ProducerSignature.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProducerSignature);
      }
      if (MerkleRoot.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(MerkleRoot);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Timestamp);
      }
      if (SequenceNumber != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(SequenceNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlockHash);
      }
      if (PreviousBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PreviousBlockHash);
      }
      if (Producer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Producer);
      }
      if (ProducerSignature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProducerSignature);
      }
      if (MerkleRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MerkleRoot);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (SequenceNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SequenceNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockHeaderProto other) {
      if (other == null) {
        return;
      }
      if (other.BlockHash.Length != 0) {
        BlockHash = other.BlockHash;
      }
      if (other.PreviousBlockHash.Length != 0) {
        PreviousBlockHash = other.PreviousBlockHash;
      }
      if (other.Producer.Length != 0) {
        Producer = other.Producer;
      }
      if (other.ProducerSignature.Length != 0) {
        ProducerSignature = other.ProducerSignature;
      }
      if (other.MerkleRoot.Length != 0) {
        MerkleRoot = other.MerkleRoot;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.SequenceNumber != 0UL) {
        SequenceNumber = other.SequenceNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BlockHash = input.ReadBytes();
            break;
          }
          case 18: {
            PreviousBlockHash = input.ReadBytes();
            break;
          }
          case 26: {
            Producer = input.ReadString();
            break;
          }
          case 34: {
            ProducerSignature = input.ReadString();
            break;
          }
          case 42: {
            MerkleRoot = input.ReadBytes();
            break;
          }
          case 48: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 56: {
            SequenceNumber = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
